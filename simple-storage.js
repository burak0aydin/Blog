// Basit JSON File Storage Manager
class SimpleStorageManager {
    static DATA_URL = './data/data.json';
    
    // Veri y√ºkleme
    static async loadContent(type) {
        try {
            // √ñnce localStorage'dan kontrol et
            const localData = this.loadFromLocalStorage(type);
            if (localData) {
                console.log(`‚úÖ ${type} localStorage'dan y√ºklendi`);
                return localData;
            }

            // JSON dosyasƒ±ndan y√ºkle
            const response = await fetch(this.DATA_URL + '?t=' + Date.now());
            if (!response.ok) {
                throw new Error('Veri y√ºklenemedi');
            }
            
            const data = await response.json();
            const content = data.blog_content[type];
            
            if (content) {
                // localStorage'a da kaydet
                this.saveToLocalStorage(type, content);
                console.log(`‚úÖ ${type} JSON dosyasƒ±ndan y√ºklendi`);
                return content;
            }
            
            return null;
        } catch (error) {
            console.warn(`‚ö†Ô∏è ${type} y√ºklenemedi, localStorage kullanƒ±lƒ±yor:`, error);
            return this.loadFromLocalStorage(type);
        }
    }

    // Veri kaydetme
    static async saveContent(type, data) {
        try {
            // √ñnce localStorage'a kaydet
            this.saveToLocalStorage(type, data);
            
            // JSON dosyasƒ±nƒ± g√ºncelleme sim√ºlasyonu
            console.log(`‚úÖ ${type} kaydedildi (localStorage + sim√ºlasyon)`);
            
            // Not: Ger√ßek projede bu bir API call olacak
            // ≈ûimdilik localStorage ile √ßalƒ±≈üƒ±yoruz
            
        } catch (error) {
            console.error(`‚ùå ${type} kaydedilirken hata:`, error);
            throw error;
        }
    }

    // ƒ∞√ßerik temizleme
    static async clearContent(type) {
        localStorage.removeItem(`blog_${type}`);
        console.log(`‚úÖ ${type} temizlendi`);
    }

    // localStorage helper'larƒ±
    static loadFromLocalStorage(type) {
        try {
            const stored = localStorage.getItem(`blog_${type}`);
            return stored ? JSON.parse(stored) : null;
        } catch (error) {
            console.error(`‚ùå localStorage'dan ${type} okunamadƒ±:`, error);
            return null;
        }
    }

    static saveToLocalStorage(type, data) {
        try {
            localStorage.setItem(`blog_${type}`, JSON.stringify(data));
        } catch (error) {
            console.error(`‚ùå localStorage'a ${type} kaydedilemedi:`, error);
        }
    }

    // T√ºm verileri y√ºkleme
    static async initializeFromStorage() {
        console.log('üöÄ Veriler y√ºkleniyor...');
        
        // Blog yazƒ±sƒ± y√ºkleme
        const textData = await this.loadContent('text');
        if (textData) {
            window.APP_STATE.textTitle = textData.title || 'Blog Yazƒ±sƒ±';
            window.APP_STATE.textContent = textData.content || '';
            console.log('‚úÖ Blog yazƒ±sƒ± y√ºklendi');
        }

        // Resim y√ºkleme
        const imageData = await this.loadContent('image');
        if (imageData) {
            window.APP_STATE.imageURL = imageData.data;
            console.log('‚úÖ Resim y√ºklendi');
        }

        // YouTube video y√ºkleme
        const videoData = await this.loadContent('video');
        if (videoData && videoData.type === 'youtube') {
            window.APP_STATE.videoURL = videoData.embedUrl;
            window.APP_STATE.youtubeVideoId = videoData.videoId;
            window.APP_STATE.youtubeUrl = videoData.originalUrl;
            console.log('‚úÖ YouTube video y√ºklendi');
        }
        
        console.log('üèÅ Veri y√ºkleme tamamlandƒ±');
    }
}

// StorageManager'ƒ± SimpleStorageManager ile deƒüi≈ütir
window.StorageManager = SimpleStorageManager;
